name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest version tag
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 || echo "v1.0.${{ github.run_number }}")
          echo "Latest version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Increment version using GitHub Actions run number
        id: increment_version
        run: |
          VERSION="v1.0.${{ github.run_number }}"
          echo "New version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create and push new version tag
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin "refs/tags/${{ env.VERSION }}")
          if [ -z "$TAG_EXISTS" ]; then
            git tag ${{ env.VERSION }}
            git push origin ${{ env.VERSION }}
          else
            echo "Tag ${{ env.VERSION }} already exists on remote. Skipping tag creation."

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            nutzkiller/weather-app:latest
            nutzkiller/weather-app:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to EC2
        run: |
          VERSION="v1.0.${{ github.run_number }}"
          echo "${{ secrets.EC2_KEY }}" > key.pem
          chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            export PATH=\$PATH:/usr/sbin:/usr/bin:/sbin:/bin && \
            if [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
              sudo apt-get update && sudo apt-get install -y docker.io; \
            elif [ -f /etc/redhat-release ]; then \
              sudo yum update -y && sudo yum install -y docker; \
            elif [ -f /etc/system-release ] && grep -q 'Amazon Linux' /etc/system-release; then \
              sudo yum update -y && sudo yum install -y docker; \
            else \
              echo 'Unsupported OS'; exit 1; \
            fi && \
            sudo systemctl start docker && \
            sudo usermod -aG docker \$USER && newgrp docker && \
            docker --version && \
            docker pull nutzkiller/weather-app:${{ VERSION }} && \
            docker run -d nutzkiller/weather-app:${{ VERSION }}"

          rm -f key.pem
