name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest version tag
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 || echo "v1.0.0")
          echo "Latest version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          VERSION="${{ env.VERSION }}"
          VERSION_WITHOUT_V="${VERSION:1}"
          IFS='.' read -r -a version_parts <<< "$VERSION_WITHOUT_V"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=$((version_parts[2] + 1))

          new_version="v$major.$minor.$patch"
          echo "New version: $new_version"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Create and push new version tag
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin "refs/tags/${{ env.VERSION }}")
          if [ -z "$TAG_EXISTS" ]; then
            git tag ${{ env.VERSION }}
            git push origin ${{ env.VERSION }}
          else
            echo "Tag ${{ env.VERSION }} already exists on remote. Skipping tag creation."
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            nutzkiller/weather-app:latest
            nutzkiller/weather-app:${{ env.VERSION }}

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" > key.pem
          chmod 600 key.pem
          scp -i key.pem -o StrictHostKeyChecking=no Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            sudo apt-get update && sudo apt-get install -y docker.io && sudo systemctl start docker
            docker --version
            cd /home/${{ secrets.EC2_USER }} && docker build -t weather-app . && docker run -d weather-app"
